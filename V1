local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

local Window = Fluent:CreateWindow({
    Title = "Evade" .. Fluent.Version,
    SubTitle = "by Jude",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = true, -- The blur may be detectable, setting this to false disables blur entirely
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.LeftControl -- Used when there's no MinimizeKeybind
})

--Fluent provides Lucide Icons https://lucide.dev/icons/ for the tabs, icons are optional
local Tabs = {
    Main = Window:AddTab({ Title = "Main", Icon = "" }),
    Settings = Window:AddTab({ Title = "Settings", Icon = "" })
    Misc = Window:AddTab({ Title = "Misc", Icon = "" }),     -- Added a new tab called "Misc"
    Credits = Window:AddTab({ Title = "Credits", Icon = "" }) -- Added a new tab called "Credits"
}


local Options = Fluent.Options

do
    local Players = game:GetService("Players")
    local player = Players.LocalPlayer  -- Get the local player

    local playerName = player.Name  -- Get the player's name

    Fluent:Notify({
        Title = "Welcome Back",
        Content = "Welcome back, " .. playerName,
        SubContent = "We're glad to see you again!", -- Optional, you can customize this
        Duration = 5 -- Set to nil to make the notification not disappear
    })
end

Tabs.Main:AddParagraph({
    Title = "Main",
    Content = ""
})

Tabs.Main:AddButton({
    Title = "God Mode",
    Description = "Activates god mode for the player!",
    Callback = function()
        Window:Dialog({
            Title = "God Mode",
            Content = "Are you sure you want to activate God Mode?",
            Buttons = {
                {
                    Title = "Confirm",
                    Callback = function()
                        local Players = game:GetService("Players")
                        local player = Players.LocalPlayer  -- Get the local player

                        local Character = player.Character or player.CharacterAdded:Wait()
                        local Hum = Character:WaitForChild("Humanoid")
                        Hum.Parent = nil
                        Hum.Parent = Character
                    end
                }
            }
        })
    end
})

Tabs.Main:AddButton({
    Title = "Respawn",
    Description = "Respawn the player without Robux's!",
    Callback = function()
        local Players = game:GetService("Players")
        local player = Players.LocalPlayer
        local Events = game:GetService("ReplicatedStorage"):FindFirstChild("Events")

        if Events then
            local Reset = Events:FindFirstChild("Reset")
            local Respawn = Events:FindFirstChild("Respawn")

            if Reset and Respawn then
                Reset:FireServer()
                task.wait(2)
                Respawn:FireServer()
            end
        end
    end
})

Tabs.Main:AddButton({
    Title = "Anti AFK",
    Description = "Prevent being marked as AFK",
    Callback = function()
        local player = game:GetService("Players").LocalPlayer
        for _,v in pairs(getconnections(player.Idled)) do
            v:Disable()
        end
    end
})

local Toggle = Tabs.Main:AddToggle("ESP", {Title = "ESP", Default = false })

Toggle:OnChanged(function()
    if Options.ESP.Value then
        -- If toggle is turned on, execute the ESP function
        Simple_Create(player.Character.HumanoidRootPart, "ESP", "ESP", 10) -- You may need to adjust the arguments here
    else
        -- If toggle is turned off, execute the function to clear ESP
        ClearESP("ESP")
    end
end)

Options.ESP:SetValue(false) -- Set the default value of the ESP toggle to false

function Simple_Create(base, name, trackername, studs)
    local bb = Instance.new('BillboardGui', game.CoreGui)
    bb.Adornee = base
    bb.ExtentsOffset = Vector3.new(0,1,0)
    bb.AlwaysOnTop = true
    bb.Size = UDim2.new(0,6,0,6)
    bb.StudsOffset = Vector3.new(0,1,0)
    bb.Name = trackername

    local frame = Instance.new('Frame', bb)
    frame.ZIndex = 10
    frame.BackgroundTransparency = 0.3
    frame.Size = UDim2.new(1,0,1,0)
    frame.BackgroundColor3 = Color3.fromRGB(255, 0, 0)

    local txtlbl = Instance.new('TextLabel', bb)
    txtlbl.ZIndex = 10
    txtlbl.BackgroundTransparency = 1
    txtlbl.Position = UDim2.new(0,0,0,-48)
    txtlbl.Size = UDim2.new(1,0,10,0)
    txtlbl.Font = 'ArialBold'
    txtlbl.FontSize = 'Size12'
    txtlbl.Text = name
    txtlbl.TextStrokeTransparency = 0.5
    txtlbl.TextColor3 = Color3.fromRGB(255, 0, 0)

    local txtlblstud = Instance.new('TextLabel', bb)
    txtlblstud.ZIndex = 10
    txtlblstud.BackgroundTransparency = 1
    txtlblstud.Position = UDim2.new(0,0,0,-35)
    txtlblstud.Size = UDim2.new(1,0,10,0)
    txtlblstud.Font = 'ArialBold'
    txtlblstud.FontSize = 'Size12'
    txtlblstud.Text = tostring(studs) .. " Studs"
    txtlblstud.TextStrokeTransparency = 0.5
    txtlblstud.TextColor3 = Color3.new(255,255,255)
end

function ClearESP(espname)
    for _,v in pairs(game.CoreGui:GetChildren()) do
        if v.Name == espname and v:IsA('BillboardGui') then
            v:Destroy()
        end
    end
end

-- Walk Speed Slider
local WalkSpeedSlider = Tabs.Main:AddSlider("WalkSpeedSlider", {
    Title = "Walk Speed",
    Description = "Adjust the walk speed",
    Default = 16,
    Min = 0,
    Max = 50,
    Rounding = 1,
    Callback = function(Value)
        local Character = game.Players.LocalPlayer.Character
        if Character then
            Character.Humanoid:SetAttribute("RealSpeed", tonumber(Value))
        end
    end
})

-- Jump Power Slider
local JumpPowerSlider = Tabs.Main:AddSlider("JumpPowerSlider", {
    Title = "Jump Power",
    Description = "Adjust the jump power",
    Default = 50,
    Min = 0,
    Max = 250,
    Rounding = 1,
    Callback = function(Value)
        local Character = game.Players.LocalPlayer.Character
        if Character then
            Character.Humanoid:SetAttribute("RealJumpHeight", tonumber(Value))
        end
    end
})

-- Set initial values
WalkSpeedSlider:SetValue(16)
JumpPowerSlider:SetValue(50)

Tabs.Server:AddParagraph({
    Title = "Server Trolling",
    Content = "A little troll."
})

Tabs.Server:AddButton({
    Title = "Crash Server",
    Description = "Attempt to crash the server",
    Callback = function()
        local Players = game:GetService("Players")
        local player = Players.LocalPlayer
        local Events = game:GetService("ReplicatedStorage"):FindFirstChild("Events")

        if Events then
            local Reset = Events:FindFirstChild("Reset")
            local Respawn = Events:FindFirstChild("Respawn")
            Fluent:Notify({
                Title = "Server Trolling",
                Content = "You have trolled the server",
                Duration = 5
            })
            while task.wait() do
                if Reset and Respawn then
                    Reset:FireServer()
                    Respawn:FireServer()
                end
            end
        end
    end
})

Tabs.Server:AddParagraph({
    Title = "Settings UI Color",
    Content = "Customize the UI color."
})

local Colorpicker = Tabs.Server:AddColorpicker("Colorpicker", {
    Title = "Colorpicker",
    Default = Color3.fromRGB(96, 205, 255)
})

Colorpicker:OnChanged(function()
    print("Colorpicker changed:", Colorpicker.Value)
end)

Colorpicker:SetValueRGB(Color3.fromRGB(0, 255, 140))

Tabs.Misc:AddParagraph({
    Title = "Misc",
    Content = "Miscellaneous options."
})

Tabs.Misc:AddButton({
    Title = "Alpha Skin",
    Description = "Give Alpha Skin",
    Callback = function()
        local Events = game:GetService("ReplicatedStorage"):FindFirstChild("Events")
        if Events then
            Events.UI.Purchase:InvokeServer("Skins", "AlphaTester")
        end
    end
})

Tabs.Misc:AddButton({
    Title = "Boombox Giver",
    Description = "Give Boombox Skin",
    Callback = function()
        local Events = game:GetService("ReplicatedStorage"):FindFirstChild("Events")
        if Events then
            Events.UI.Purchase:InvokeServer("Skins", "Boombox")
        end
    end
})

Tabs.Misc:AddButton({
    Title = "Dev Test Emote",
    Description = "Give Dev Test Emote",
    Callback = function()
        local Events = game:GetService("ReplicatedStorage"):FindFirstChild("Events")
        if Events then
            Events.UI.Purchase:InvokeServer("Emotes", "Test")
        end
    end
})

local Toggle = Tabs.Misc:AddToggle("LoopGodMode", {Title = "Loop God Mode", Default = false})

Toggle:OnChanged(function()
    local Players = game:GetService("Players")
    local player = Players.LocalPlayer
    local Character = player.Character or player.CharacterAdded:Wait()
    local Hum = Character:WaitForChild("Humanoid")
    local bool = Options.LoopGodMode.Value

    if bool then
        Hum.Parent = nil
        Hum.Parent = Character
    end
end)

Options.LoopGodMode:SetValue(false)

Tabs.Credits:AddParagraph({
    Title = "Credits",
    Content = "This was made by Jude and Corrupted. Also credits to Velocity."
})

 -- Hand the library over to our managers
 SaveManager:SetLibrary(Fluent)
 InterfaceManager:SetLibrary(Fluent)
 
 -- Ignore keys that are used by ThemeManager.
 -- (we dont want configs to save themes, do we?)
 SaveManager:IgnoreThemeSettings()
 
 -- You can add indexes of elements the save manager should ignore
 SaveManager:SetIgnoreIndexes({})
 
 -- use case for doing it this way:
 -- a script hub could have themes in a global folder
 -- and game configs in a separate folder per game
 InterfaceManager:SetFolder("FluentScriptHub")
 SaveManager:SetFolder("FluentScriptHub/Evade")
 
 InterfaceManager:BuildInterfaceSection(Tabs.Settings)
 SaveManager:BuildConfigSection(Tabs.Settings)
